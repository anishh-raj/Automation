package SeleniumTest;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Test2 {
    private static WebDriver driver;
    private static WebDriverWait wait; 

    public static WebDriver setupDriver() {
    	
        ChromeOptions opt = new ChromeOptions();
        opt.addArguments("--disable-notifications");
        opt.addArguments("--remote-allow-origins=*");

        System.setProperty("webdriver.chrome.driver", "//Users/apple/eclipse-workspace/Selenium/src/test/java/chromedriver");

        return new ChromeDriver(opt);
    }
    
    
    public static void PrintAssessmentStatus(String assessmentType) {
        String xpathExpression; // Declaring the variable 

        if ("desktop".equals(assessmentType)) {
            xpathExpression = "(//span[@class='bXhnD'])[1]";
        } else if ("mobile".equals(assessmentType)) { 
            xpathExpression = "(//span[@class='ZwKnne'])[1]"; 
        } else {
            System.out.println("Invalid assessment type: " + assessmentType);
            return;
        }

        WebElement assessmentStatusElement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(xpathExpression)));
        String assessmentStatus = assessmentStatusElement.getText();

        System.out.println("Core Web Vitals Assessment(" + assessmentType + "): " + assessmentStatus);
    }
    
    


    public static void PrintMetrics(String[] metricLabels, int startIndex) {
        for (int i = 0; i < metricLabels.length; i++) {
            WebElement metricElement = null;
            metricElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("(//span[@class='Ykn2A YznLle' or @class='Ykn2A LR2yK'])[" + (i + startIndex) + "]")));
            String metricValue = metricElement.getText();
            System.out.println(metricLabels[i] + ": " + metricValue);
        }
    }

    
    public static void PrintCustomMetrics(String[] customMetrics, int startIndex) {
        for (int i = 0; i < customMetrics.length; i++) {
            WebElement customElement = null;
            customElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("(//div[@class='lh-metric__value'])[" + (i + startIndex) + "]")));
            String metricValue = customElement.getText();
            System.out.println(customMetrics[i] + ": " + metricValue);
        }
    }

    public static void main(String[] args) {
        driver = setupDriver();
        wait = new WebDriverWait(driver, 100); 

        driver.get("https://pagespeed.web.dev/");

        WebElement urlInput = driver.findElement(By.id("i4"));
        urlInput.sendKeys("stattimes.com");

        WebElement analyzeButton = driver.findElement(By.xpath("//span[text()='Analyze']"));
        analyzeButton.click();

        wait.until(ExpectedConditions.urlContains("https://pagespeed.web.dev/analysis/"));

  // Mobile assessment status     
        PrintAssessmentStatus("mobile");

  // Mobile Details
        String[] metricLabels = {"LCP", "FID", "CLS", "FCP", "INP", "TTFB"};
        PrintMetrics(metricLabels, 1);

        String[] customMetrics = {"First Contentful Paint", "Largest Contentful Paint", "Total Blocking Time", "Cumulative Layout Shift", "Speed Index"};
        PrintCustomMetrics(customMetrics, 1);

  // Clicking the desktop button
        WebElement desktopButton = driver.findElement(By.xpath("(//span[@class='VfPpkd-YVzG2b' and @jsname='ksKsZd'])[2]"));
        desktopButton.click();

   // Print desktop assessment status
        PrintAssessmentStatus("desktop");

   // Desktop Details
        PrintMetrics(metricLabels, 7);

        PrintCustomMetrics(customMetrics, 6);
    }
}
